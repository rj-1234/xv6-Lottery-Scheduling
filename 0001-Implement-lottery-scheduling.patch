From 4449b0b9484fa18fb9739fcd3d7c878247e2139c Mon Sep 17 00:00:00 2001
From: Binal <bjm470@nyu.edu>
Date: Mon, 20 Nov 2017 12:36:10 -0500
Subject: [PATCH] Implement lottery scheduling

---
 Makefile      |  1 +
 lotterytest.c |  2 +-
 proc.c        | 38 +++++++++++++++++++++++++++++++++-----
 proc.h        |  1 +
 syscall.c     |  2 ++
 syscall.h     |  3 ++-
 sysproc.c     | 11 +++++++++++
 user.h        |  1 +
 usys.S        |  1 +
 9 files changed, 53 insertions(+), 7 deletions(-)

diff --git a/Makefile b/Makefile
index 5d91068..7d17a81 100644
--- a/Makefile
+++ b/Makefile
@@ -174,6 +174,7 @@ UPROGS=\
 	_wc\
 	_zombie\
 	_hackbench\
+	_lotterytest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/lotterytest.c b/lotterytest.c
index 4968acf..a895bbb 100644
--- a/lotterytest.c
+++ b/lotterytest.c
@@ -1,7 +1,7 @@
 #include "types.h"
 #include "user.h"
 #include "date.h"
-
+#include "rand.h"
 // Do some useless computations
 void spin(int tix) {
     struct rtcdate end;
diff --git a/proc.c b/proc.c
index b122e3b..270fe4f 100644
--- a/proc.c
+++ b/proc.c
@@ -16,6 +16,10 @@ struct {
 static struct proc *initproc;
 
 int nextpid = 1;
+int test_num = 0;
+int test_counter = 0;
+int total_tickets = 0;
+
 extern void forkret(void);
 extern void trapret(void);
 
@@ -49,6 +53,7 @@ allocproc(void)
 
 found:
   p->state = EMBRYO;
+  p->tickets = 10;
   p->pid = nextpid++;
   release(&ptable.lock);
 
@@ -269,6 +274,9 @@ void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *q;
+  int counter = 0;
+  long num =0;
   int foundproc = 1;
 
   for(;;){
@@ -280,10 +288,29 @@ scheduler(void)
 
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
+    num=0;
+    counter =0;
+    total_tickets=0;
+    test_counter = 0;
+
+    for(q = ptable.proc; q < &ptable.proc[NPROC]; q++){
+        if(q->state != RUNNABLE)
+         continue;
+        total_tickets = total_tickets + q->tickets;
+    }
+    
+      num = random_at_most(total_tickets);
+      test_num = num;
+      for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+        if(p->state != RUNNABLE)
+          continue;
+	  if((counter + p->tickets) < num)
+          {
+            counter = counter + p->tickets;
+	    test_counter = counter;
+            continue;
+           }      
+   
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
       // before jumping back to us.
@@ -297,6 +324,7 @@ scheduler(void)
       // Process is done running for now.
       // It should have changed its p->state before coming back.
       proc = 0;
+      break;
     }
     release(&ptable.lock);
 
@@ -463,7 +491,7 @@ procdump(void)
       state = states[p->state];
     else
       state = "???";
-    cprintf("%d %s %s", p->pid, state, p->name);
+     cprintf("%d %s %s %d %s %d %d %d", p->pid, state, p->name , p->tickets,"hello",total_tickets,test_num,test_counter);
     if(p->state == SLEEPING){
       getcallerpcs((uint*)p->context->ebp+2, pc);
       for(i=0; i<10 && pc[i] != 0; i++)
diff --git a/proc.h b/proc.h
index 3b9c3ac..75b29c5 100644
--- a/proc.h
+++ b/proc.h
@@ -53,6 +53,7 @@ enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
 // Per-process state
 struct proc {
+  int tickets;
   uint sz;                     // Size of process memory (bytes)
   pde_t* pgdir;                // Page table
   char *kstack;                // Bottom of kernel stack for this process
diff --git a/syscall.c b/syscall.c
index 0e06ad4..849877c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -99,6 +99,7 @@ extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
 extern int sys_gettime(void);
+extern int sys_settickets(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -123,6 +124,7 @@ static int (*syscalls[])(void) = {
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
 [SYS_gettime] sys_gettime,
+[SYS_settickets] sys_settickets,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index 6d6c224..d3a8394 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,4 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
-#define SYS_gettime 22
+#define SYS_gettime 22	
+#define SYS_settickets 23
diff --git a/sysproc.c b/sysproc.c
index ddaed7c..7649658 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -13,6 +13,17 @@ sys_fork(void)
   return fork();
 }
 
+	
+int 
+sys_settickets(void)
+{
+  int num;
+  if(argint(0, &num) < 0)
+    return -1;
+  proc->tickets = num;
+  return num;
+}
+
 int
 sys_exit(void)
 {
diff --git a/user.h b/user.h
index 46d1059..58e344c 100644
--- a/user.h
+++ b/user.h
@@ -24,6 +24,7 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 int gettime(struct rtcdate *);
+int settickets(int);
 
 // ulib.c
 int stat(char*, struct stat*);
diff --git a/usys.S b/usys.S
index e556d66..27646a9 100644
--- a/usys.S
+++ b/usys.S
@@ -30,3 +30,4 @@ SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
 SYSCALL(gettime)
+SYSCALL(settickets)
-- 
1.9.1

